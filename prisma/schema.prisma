generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account []
  boards        Board[]
  cadernos      Caderno[]
  resumos       Resumo[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Board {
    id                 String   @id @default(cuid())
    title              String
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    userId             String
    user               User     @relation(fields: [userId], references: [id])
    lists              List[]
 }

model List {
  id                   String   @id @default(cuid())
  title                String
  order                Int

  boardId              String
  board                Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards                Card[]

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([boardId]) //talvez ajuste o resumo
}

model Card {
  id                   String   @id @default(cuid())
  title                String
  order                Int
  description          String? @db.Text

  listId               String
  list                 List @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([listId])
}

model Caderno {
    id                 String   @id @default(cuid())
    title              String
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    userId             String
    user               User     @relation(fields: [userId], references: [id])
    lists              IList[]
 }

model IList {
  id                   String   @id @default(cuid())
  title                String
  order                Int

  cadernoId            String
  caderno              Caderno    @relation(fields: [cadernoId], references: [id], onDelete: Cascade)

  cards                ICard[]

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([cadernoId]) //talvez ajuste o resumo
}

model ICard {
  id                   String   @id @default(cuid())
  title                String
  order                Int
  description          String? @db.Text

  listId               String
  list                 IList @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([listId])
}

model Resumo {
    id                 String   @id @default(cuid())
    title              String
    content            String?  @db.Text
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    userId             String
    user               User     @relation(fields: [userId], references: [id])
 }


model EstanteLimit {
  id                   String @id @default(cuid())
  userId               String @unique
  count                Int @default(0)

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model RotinaLimit {
  id                   String @id @default(cuid())
  userId               String @unique
  count                Int @default(0)

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

